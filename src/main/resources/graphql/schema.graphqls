scalar Duration
scalar Distance
scalar Currency
scalar ZonedDateTime
scalar URL

type Query {
    """Language param use ISO 639-1"""
    getJourneysBy(departureLongitude: Float!, departureLatitude: Float!, arrivalLongitude: Float!, arrivalLatitude: Float!, dateTime: String!, isArrivalDateTime: Boolean = true, language: String = "de"): [Journey]
    """Language param use ISO 639-1"""
    getAutocompleteAddressesBy(text: String!, language: String = "de"): [TravelPoint]
    getNearestAddressesBy(longitude: Float!, latitude: Float!, radiusInKilometers: Float = 1, language: String = "de"): [TravelPoint]
    getNearestStationsBy(longitude: Float!, latitude: Float!, radiusInKilometers: Float = 1, language: String = "de"): [TravelPoint]
    getAllStations: [TravelPoint]
    getOperatingArea: Polygon
}

type Subscription {
    """Language param use ISO 639-1"""
    getJourneysBy(departureLongitude: Float!, departureLatitude: Float!, arrivalLongitude: Float!, arrivalLatitude: Float!, dateTime: String!, isArrivalDateTime: Boolean = true, language: String = "de"): Journey
}


type Journey {
    id: ID,
    legs: [Leg],
    prices: [Price]
}

type Leg {
    departure: TravelPoint,
    arrival: TravelPoint,
    delayInMinutes: Duration,
    distanceInKilometers: Distance,
    vehicleType: VehicleType,
    waypoints: [Point],
    travelProvider: TravelProvider,
    vehicleNumber: String,
    vehicleName: String,
    intermediateStops: [TravelPoint],
    walkSteps: [WalkStep]
}

type Price {
    priceType: PriceType,
    currencyCode: Currency,
    smallestCurrencyValue: Int
}

type Point {
    x: Float,
    y: Float
}

type TravelPoint {
    name: String,
    point: Point,
    arrivalTime: ZonedDateTime,
    departureTime: ZonedDateTime,
    platform: String
    distanceInKilometers: Distance
}

type TravelProvider {
    name: String,
    url: URL
}

type WalkStep {
    streetName: String,
    distanceInKilometers: Distance,
    startPoint: Point,
    endPoint: Point,
    walkingDirection: WalkingDirection,
    compassDirection: CompassDirection,
    isStreetNameGenerated: Boolean,
    isOriginPoint: Boolean,
    isDestinationPoint: Boolean,
    circleExit: String
}

type Polygon {
    points: [Point]
}

enum PriceType {
    REGULAR,
    STUDENT,
    SENIOR,
    TRAM,
    SPECIAL,
    YOUTH
}

enum VehicleType {
    WALK,
    BICYCLE,
    CAR,
    TRAM,
    SUBWAY,
    RAIL,
    BUS,
    FERRY,
    CABLE_CAR,
    GONDOLA,
    FUNICULAR,
    TRANSIT,
    AIRPLANE
}

enum WalkingDirection {
    DEPART,
    HARD_LEFT,
    LEFT,
    SLIGHTLY_LEFT,
    CONTINUE,
    SLIGHTLY_RIGHT,
    RIGHT,
    HARD_RIGHT,
    CIRCLE_CLOCKWISE,
    CIRCLE_COUNTERCLOCKWISE,
    ELEVATOR,
    UTURN_LEFT,
    UTURN_RIGHT
}

enum CompassDirection {
    NORTH,
    NORTHEAST,
    EAST,
    SOUTHEAST,
    SOUTH,
    SOUTHWEST,
    WEST,
    NORTHWEST
}